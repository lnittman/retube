'use client';

import { useState, useRef, useEffect } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import { 
  ChatsCircle, 
  ArrowCircleRight, 
  LinkSimple, 
  Palette,
  CircleNotch,
  CaretRight
} from '@phosphor-icons/react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { cn } from '@/lib/utils';

export type ProcessingStage = 
  | 'analyzing prompt'
  | 'searching videos'
  | 'creating grid'
  | 'finishing up'
  | null;

export interface PromptInterfaceProps {
  onSubmit: (prompt: string) => void;
  isProcessing: boolean;
  processingStage: ProcessingStage;
  processingMessages?: string[];
}

type InputMode = 'text' | 'url' | 'palette';

type ColorPalette = {
  name: string;
  colors: string[];
  trend?: string;
  source?: string;
};

export default function PromptInterface({ 
  onSubmit, 
  isProcessing, 
  processingStage,
  processingMessages = []
}: PromptInterfaceProps) {
  const [userInput, setUserInput] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [inputMode, setInputMode] = useState<InputMode>('text');
  const [selectedPalette, setSelectedPalette] = useState<string | null>(null);
  const [generatingPalette, setGeneratingPalette] = useState(false);
  const [colorPalettes, setColorPalettes] = useState<ColorPalette[]>([]);
  const [activePalette, setActivePalette] = useState<string | null>(null);
  const [expanded, setExpanded] = useState(false);
  
  const inputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const paletteScrollRef = useRef<HTMLDivElement>(null);

  // Load palettes on mount
  useEffect(() => {
    generateMockPalettes();
  }, []);

  useEffect(() => {
    // Auto-focus the input field on mount
    if (inputRef.current && !isProcessing) {
      inputRef.current.focus();
    }
  }, [isProcessing]);

  // Scroll to bottom of messages
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [processingMessages]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUserInput(e.target.value);
    if (error) setError(null);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!userInput.trim() && !selectedPalette) {
      setError('please enter a prompt, url, or select a palette');
      return;
    }
    
    if (inputMode === 'url' && !isValidURL(userInput)) {
      setError('please enter a valid url');
      return;
    }
    
    let finalPrompt = userInput;
    
    // If palette is selected, add it to the prompt
    if (selectedPalette) {
      const palette = colorPalettes.find(p => p.name === selectedPalette);
      if (palette) {
        finalPrompt = userInput ? 
          `${userInput} (colors: ${palette.colors.join(', ')})` : 
          `create a grid with color theme: ${palette.colors.join(', ')}`;
      }
    }
    
    // Process URL with r.jina.ai if in URL mode
    if (inputMode === 'url') {
      // In a real implementation, we would call r.jina.ai here
      finalPrompt = `process video from: ${userInput}`;
    }
    
    onSubmit(finalPrompt);
    setUserInput('');
    setSelectedPalette(null);
    setExpanded(false);
  };

  const isValidURL = (string: string) => {
    try {
      new URL(string);
      return true;
    } catch (_) {
      return false;
    }
  };
  
  // Generate more diverse and trendy color palettes
  const generateMockPalettes = () => {
    setGeneratingPalette(true);
    
    // Simulate API delay
    setTimeout(() => {
      // These would normally be generated by Gemini 2 Flash
      const mockPalettes: ColorPalette[] = [
        { 
          name: 'nocturnal', 
          colors: ['#121212', '#2D3047', '#419D78', '#E0A458', '#FFDBB5'],
          trend: 'dark mode',
          source: 'digital design'
        },
        { 
          name: 'electric', 
          colors: ['#011627', '#FF3366', '#2EC4B6', '#F6F7F8', '#20A4F3'],
          trend: 'cyberpunk',
          source: 'digital art'
        },
        { 
          name: 'minimal', 
          colors: ['#F8F9FA', '#E9ECEF', '#DEE2E6', '#CED4DA', '#ADB5BD'],
          trend: 'scandinavian',
          source: 'interior design'
        },
        { 
          name: 'sunset', 
          colors: ['#1A1A2E', '#16213E', '#0F3460', '#E94560', '#FFAEBC'],
          trend: 'retrowave',
          source: 'music visuals'
        },
        { 
          name: 'forest', 
          colors: ['#2D3047', '#1B998B', '#2E294E', '#EFBCD5', '#BE97C6'],
          trend: 'biophilic',
          source: 'nature photography'
        },
        { 
          name: 'pastel dream', 
          colors: ['#F1E3F3', '#C2BBF0', '#8FB8ED', '#62BEC1', '#5AD2F4'],
          trend: 'y2k revival',
          source: 'fashion'
        },
        { 
          name: 'terracotta', 
          colors: ['#E07A5F', '#3D405B', '#81B29A', '#F2CC8F', '#D4A373'],
          trend: 'earth tones',
          source: 'interior design'
        },
        { 
          name: 'neon tokyo', 
          colors: ['#2E0249', '#570A57', '#A91079', '#F806CC', '#FBD6D2'],
          trend: 'nightlife',
          source: 'urban photography' 
        },
      ];
      
      setColorPalettes(mockPalettes);
      setGeneratingPalette(false);
    }, 1000);
  };
  
  const selectPalette = (name: string) => {
    setSelectedPalette(name === selectedPalette ? null : name);
    setActivePalette(null);
  };
  
  const togglePaletteExpansion = () => {
    setExpanded(!expanded);
    setInputMode('palette');
  };
  
  const handlePaletteMouseEnter = (name: string) => {
    setActivePalette(name);
  };
  
  const handlePaletteMouseLeave = () => {
    setActivePalette(null);
  };

  return (
    <motion.div 
      initial={{ y: 20, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      transition={{ duration: 0.3 }}
      className="px-4 pb-4"
    >
      <div className="mx-auto max-w-2xl bg-zinc-900/90 backdrop-blur-lg border border-zinc-800 rounded-xl overflow-hidden">
        <form onSubmit={handleSubmit} className="relative">
          <AnimatePresence mode="wait">
            {isProcessing && (
              <motion.div 
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="absolute inset-0 z-20 flex flex-col items-center justify-center bg-black/70 backdrop-blur-sm"
              >
                <StageIndicator stage={processingStage} />
                
                {processingMessages.length > 0 && (
                  <motion.div 
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mt-4 max-h-24 overflow-y-auto w-full px-4"
                  >
                    <div className="space-y-1">
                      {processingMessages.map((message, index) => (
                        <motion.p 
                          key={index}
                          initial={{ opacity: 0, y: 5 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: 0.1 * (index % 5) }}
                          className="text-xs text-zinc-400 text-center"
                        >
                          {message}
                        </motion.p>
                      ))}
                      <div ref={messagesEndRef} />
                    </div>
                  </motion.div>
                )}
              </motion.div>
            )}
          </AnimatePresence>
          
          <div className="flex items-center justify-between px-3 py-2 border-b border-zinc-800">
            <div className="flex space-x-1">
              <button
                type="button"
                onClick={() => setInputMode('text')}
                className={cn(
                  "p-2 rounded-md",
                  inputMode === 'text' 
                    ? "bg-zinc-800 text-white" 
                    : "text-zinc-400 hover:text-white hover:bg-zinc-800/50"
                )}
              >
                <ChatsCircle size={18} weight={inputMode === 'text' ? "fill" : "regular"} />
              </button>
              
              <button
                type="button"
                onClick={() => setInputMode('url')}
                className={cn(
                  "p-2 rounded-md",
                  inputMode === 'url' 
                    ? "bg-zinc-800 text-white" 
                    : "text-zinc-400 hover:text-white hover:bg-zinc-800/50"
                )}
              >
                <LinkSimple size={18} weight={inputMode === 'url' ? "fill" : "regular"} />
              </button>
              
              <div className="relative">
                <button
                  type="button"
                  onClick={togglePaletteExpansion}
                  className={cn(
                    "p-2 rounded-md",
                    inputMode === 'palette' 
                      ? "bg-zinc-800 text-white" 
                      : "text-zinc-400 hover:text-white hover:bg-zinc-800/50"
                  )}
                >
                  <Palette size={18} weight={inputMode === 'palette' ? "fill" : "regular"} />
                </button>
                
                <AnimatePresence>
                  {expanded && (
                    <motion.div 
                      initial={{ width: 0, opacity: 0 }}
                      animate={{ width: 'auto', opacity: 1 }}
                      exit={{ width: 0, opacity: 0 }}
                      transition={{ duration: 0.3, ease: "easeInOut" }}
                      className="absolute left-full top-0 ml-1 h-[42px] bg-zinc-800 rounded-r-full overflow-hidden flex items-center pr-2"
                    >
                      <div 
                        ref={paletteScrollRef}
                        className="flex space-x-2 px-3 overflow-x-auto scrollbar-hide"
                      >
                        {colorPalettes.map((palette) => (
                          <div
                            key={palette.name}
                            className="relative flex-shrink-0"
                            onMouseEnter={() => handlePaletteMouseEnter(palette.name)}
                            onMouseLeave={handlePaletteMouseLeave}
                          >
                            <button
                              type="button"
                              onClick={() => selectPalette(palette.name)}
                              className={`flex h-[34px] w-[34px] rounded-full overflow-hidden transition-all ${
                                selectedPalette === palette.name 
                                  ? 'ring-2 ring-white' 
                                  : 'ring-1 ring-zinc-700 hover:ring-zinc-500'
                              }`}
                            >
                              <div className="flex h-full w-full">
                                {palette.colors.map((color, i) => (
                                  <div 
                                    key={i} 
                                    className="h-full flex-1" 
                                    style={{ backgroundColor: color }}
                                  />
                                ))}
                              </div>
                            </button>
                            
                            <AnimatePresence>
                              {activePalette === palette.name && (
                                <motion.div 
                                  initial={{ opacity: 0, y: 10 }}
                                  animate={{ opacity: 1, y: 0 }}
                                  exit={{ opacity: 0, y: 10 }}
                                  className="absolute left-1/2 -translate-x-1/2 top-full mt-2 z-50 bg-zinc-950 rounded-lg p-2 shadow-lg w-[180px]"
                                >
                                  <div className="flex flex-col">
                                    <div className="text-[10px] font-medium text-zinc-300 mb-1">{palette.name}</div>
                                    <div className="flex space-x-1 mb-2">
                                      {palette.colors.map((color, i) => (
                                        <motion.div
                                          key={i}
                                          initial={{ scale: 0.8 }}
                                          animate={{ scale: 1 }}
                                          transition={{ delay: i * 0.1 }}
                                          className="w-5 h-5 rounded-full"
                                          style={{ backgroundColor: color }}
                                        />
                                      ))}
                                    </div>
                                    {palette.trend && (
                                      <div className="text-[9px] text-zinc-500">trend: {palette.trend}</div>
                                    )}
                                    {palette.source && (
                                      <div className="text-[9px] text-zinc-500">source: {palette.source}</div>
                                    )}
                                  </div>
                                </motion.div>
                              )}
                            </AnimatePresence>
                          </div>
                        ))}
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </div>
            
            {error && (
              <motion.p 
                initial={{ opacity: 0, y: 5 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-xs text-red-400 px-2"
              >
                {error}
              </motion.p>
            )}
          </div>
          
          <div className="flex flex-col">
            <div className="flex items-center px-3 py-2">
              <Input
                ref={inputRef}
                value={userInput}
                onChange={handleInputChange}
                placeholder={
                  inputMode === 'text' 
                    ? "ask for a video grid..." 
                    : inputMode === 'url' 
                      ? "paste any video url..."
                      : selectedPalette
                        ? `describe content with '${selectedPalette}' palette...`
                        : "describe colors or mood..."
                }
                className="flex-1 bg-transparent border-0 focus-visible:ring-0 focus-visible:ring-offset-0 px-0 text-sm"
                type={inputMode === 'url' ? "url" : "text"}
                autoComplete="off"
                disabled={isProcessing}
              />
              
              <Button 
                type="submit"
                size="icon"
                variant="ghost"
                disabled={isProcessing || (!userInput.trim() && !selectedPalette)}
                className="text-zinc-400 hover:text-white"
              >
                <ArrowCircleRight size={22} weight="fill" />
              </Button>
            </div>
            
            {inputMode === 'palette' && !expanded && (
              <motion.div 
                initial={{ height: 0, opacity: 0 }}
                animate={{ height: 'auto', opacity: 1 }}
                exit={{ height: 0, opacity: 0 }}
                className="px-3 pb-3 overflow-hidden"
              >
                {generatingPalette ? (
                  <div className="flex items-center justify-center py-4">
                    <CircleNotch size={20} className="animate-spin text-zinc-400" />
                    <span className="ml-2 text-sm text-zinc-400">generating palettes...</span>
                  </div>
                ) : (
                  <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 gap-2">
                    {colorPalettes.map((palette) => (
                      <button
                        key={palette.name}
                        type="button"
                        onClick={() => selectPalette(palette.name)}
                        className={`flex flex-col items-center p-2 rounded-md transition-all ${
                          selectedPalette === palette.name 
                            ? 'bg-zinc-800 ring-1 ring-white/20' 
                            : 'hover:bg-zinc-800/50'
                        }`}
                      >
                        <div className="flex mb-1.5 h-3">
                          {palette.colors.map((color, i) => (
                            <div 
                              key={i} 
                              className="w-3 h-3 rounded-full" 
                              style={{ backgroundColor: color, marginLeft: i > 0 ? -3 : 0, zIndex: i }}
                            />
                          ))}
                        </div>
                        <span className="text-[10px] text-zinc-400">{palette.name}</span>
                      </button>
                    ))}
                  </div>
                )}
              </motion.div>
            )}
          </div>
        </form>
      </div>
    </motion.div>
  );
}

function StageIndicator({ stage }: { stage: ProcessingStage }) {
  return (
    <div className="flex flex-col items-center text-center px-4">
      <motion.div
        animate={{ 
          scale: [1, 1.1, 1],
          rotate: [0, 5, -5, 0] 
        }}
        transition={{ 
          duration: 1.5, 
          repeat: Infinity,
          ease: "easeInOut"
        }}
        className="mb-3"
      >
        <div className="w-8 h-8 rounded-full bg-gradient-to-br from-violet-500 to-pink-500 flex items-center justify-center">
          <ChatsCircle size={18} weight="fill" className="text-white" />
        </div>
      </motion.div>
      <p className="text-sm font-medium">{stage ?? 'processing'}</p>
    </div>
  );
} 